package com.bbvacompass.salesforce.stepDefinitions;

import static org.junit.Assert.fail;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.openqa.selenium.By;

import com.bbvacompass.selenium.StepDefinition;

import cucumber.api.Scenario;

public class SalesforceCRMDefinitions extends StepDefinition {

	private Properties idProperties;     //properties object for id.properties
	private Properties xpathProperties;  //properties object for xpath.properties
	private Properties cssProperties;    //properties object for css.properties
	private Properties nameProperties;   //properties object for name.properties
	private Properties usersProperties;   //properties object for users.properties
	private Properties usersprofileProperties;   //properties object for users.properties
	private Properties windowProperties;  //properties object for windows.properties.
	private Properties linktextProperties;  //properties object for linktext.properties
	private Properties dropDownProperties;// properties object for dropdown boxes.
	private final String ID_PROPERTIES_FILE_NAME = "pageObjects/id.properties";       //path to id.properties
	private final String XPATH_PROPERTIES_FILE_NAME = "pageObjects/xpath.properties"; //path to xpath.properties
	private final String CSS_PROPERTIES_FILE_NAME = "pageObjects/css.properties";     //path to css.properties
	private final String NAME_PROPERTIES_FILE_NAME = "pageObjects/name.properties";   //path to name.properties
	private final String USERS_FILE_NAME_QA = "users/usersqa.properties";
	private final String USERS_FILE_NAME_UAT = "users/usersuat.properties";//path to users.properties
	private final String USERS_FILE_PROFILE = "users/usersprofile.properties";//path to usersprofile.properties
	private final String WINDOWS_FILE_NAME = "pageObjects/windows.properties";
	private final String LINKTEXT_FILE_NAME = "pageObjects/linktext.properties";
	private final String DROPDOWN_FILE_NAME= "pageObjects/dropdown.properties";
	
    public String env = "";
	/**
	 * the setup method called by the before hook.
	 * 
	 * @param scenario The current scenario.
	 */
	public void setup(Scenario scenario) {
		try {
			super.setUp(scenario); //calls the generic setup in cucumber-selenium to create the driver.
			loadPropertiesFiles(); //loads the page objects files.
		} catch (IOException e) {
			fail("failed in setup"); //fail the scenario if the setup failed.
			e.printStackTrace();
		}
	}

	public void tearDown() {
		if(scenario.isFailed()){
			screenshotFullPage(); //call to cucumber-selenium to take a screenshot while scrolling down the page.
		}
		super.tearDown(); //call to cucumber-selenium to kill the driver.
	}

	/**
	 * Creates a locator from a page object key depending on the property file the key is found in.
	 * 
	 * @param key The key existing in a page object file.
	 * @return By locator used to locate the element described by the key.
	 */
	public By getLocator(String key) {
		By locator = null; //declare return variable.
		key = key.toLowerCase().replaceAll(" ", "_");
		if (idProperties != null && hasProperty(idProperties, key)) {//if the key is found in id.properties (determined by call to cucumber-selenium)
			locator = By.id(idProperties.getProperty(key));//builds locator for an id.
		}  else if (nameProperties != null && hasProperty(nameProperties, key)) {//if the key is found in name.properties (determined by call to cucumber-selenium)
			locator = By.name(nameProperties.getProperty(key));//builds locator for a name.
		}else if (xpathProperties != null && hasProperty(xpathProperties, key)) {//if the key is found in xpath.properties (determined by call to cucumber-selenium)
			locator = By.xpath(xpathProperties.getProperty(key));//builds a locator for a xpath.
		} else if (cssProperties != null && hasProperty(cssProperties, key)) {//if the key is found in css.properties (determined by call to cucumber-selenium)
			locator = By.cssSelector(cssProperties.getProperty(key));//builds a locator for a css selector.
		} else if (linktextProperties != null && hasProperty(linktextProperties, key)) {//if the key is found in css.properties (determined by call to cucumber-selenium)
			locator = By.linkText(linktextProperties.getProperty(key));//builds a locator for a css selector
			
			
		} else {
			fail("Unable to locate property");//fails the test if unable to find the key in a property file.
		}
		return locator;//return the locator.
	}
	
	public String getUserUrl(String username){
		String key = username.toLowerCase().replaceAll(" ", "_");
		return usersProperties.getProperty(key);
	}
	
	public String getUserProfile(String userprofile){
		String key = userprofile;                              
		return usersprofileProperties.getProperty(key);
	}
	
	public String getWindowUrl(String title, String env){
		String url = windowProperties.getProperty(title);
		if(env.equalsIgnoreCase("UAT")){
			url = url.replace("<envCode>", "cs65");
		}else if(env.equalsIgnoreCase("QA")){
			url = url.replace("<envCode>", "cs8");
		}
		else if(env.equalsIgnoreCase("IT")){
			url = url.replace("<envCode>", "cs8");
		}
		return url;
	}

	private void loadPropertiesFiles() throws IOException {
		InputStream inputStream = null;//declare an input stream.
		try {
			inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(ID_PROPERTIES_FILE_NAME);//set input stream to id.properties.
			if (inputStream != null) {//if input stream was created.
				idProperties = new Properties();//initialize new properties object.
				idProperties.load(inputStream);//load id.properties into properties object
			}
			closePropertiesInputStream(inputStream);//close input stream

			inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(NAME_PROPERTIES_FILE_NAME);//set input stream to name.properties.
			if (inputStream != null) {//if input stream was created.
				nameProperties = new Properties();//initialize new properties object.
				nameProperties.load(inputStream);//load name.properties into properties object
			}
			closePropertiesInputStream(inputStream);//close input stream

			inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(CSS_PROPERTIES_FILE_NAME);//set input stream to css.properties.
			if (inputStream != null) {//if input stream was created.
				cssProperties = new Properties();//initialize new properties object.
				cssProperties.load(inputStream);//load css.properties into properties object
			}
			
			closePropertiesInputStream(inputStream);//close input stream
			
			inputStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(DROPDOWN_FILE_NAME);// set
																		// input
																		// stream
																		// to
																		// xpath.properties.
			if (inputStream != null) {// if input stream was created.
				dropDownProperties = new Properties();// initialize new properties
													// object.
				dropDownProperties.load(inputStream);// load xpath.properties into
													// properties object
			}

			inputStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(XPATH_PROPERTIES_FILE_NAME);//set input stream to xpath.properties.
			if (inputStream != null) {//if input stream was created.
				xpathProperties = new Properties();//initialize new properties object.
				xpathProperties.load(inputStream);//load xpath.properties into properties object
			}
			
			if(env.equalsIgnoreCase("UAT")){
				inputStream = Thread.currentThread().getContextClassLoader()
						.getResourceAsStream(USERS_FILE_NAME_UAT);//set input stream to users.properties.
				if (inputStream != null) {//if input stream was created.
					usersProperties = new Properties();//initialize new properties object.
					usersProperties.load(inputStream);//load xpath.properties into properties object
				}
			}else{
				inputStream = Thread.currentThread().getContextClassLoader()
						.getResourceAsStream(USERS_FILE_NAME_QA);//set input stream to users.properties.
				if (inputStream != null) {//if input stream was created.
					usersProperties = new Properties();//initialize new properties object.
					usersProperties.load(inputStream);//load xpath.properties into properties object
				}
			}
			
			inputStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(WINDOWS_FILE_NAME);//set input stream to users.properties.
			if (inputStream != null) {//if input stream was created.
				windowProperties = new Properties();//initialize new properties object.
				windowProperties.load(inputStream);//load xpath.properties into properties object
			}
			
			inputStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(LINKTEXT_FILE_NAME);//set input stream to users.properties.
			if (inputStream != null) {//if input stream was created.
				linktextProperties = new Properties();//initialize new properties object.
				linktextProperties.load(inputStream);//load linktext.properties into properties object
			}
			inputStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(USERS_FILE_PROFILE);//set input stream to usersprofile.properties.
			if (inputStream != null) {//if input stream was created.
				usersprofileProperties = new Properties();//initialize new properties object.
				usersprofileProperties.load(inputStream);//load linktext.properties into properties object
			}

			


		} catch (Exception e) {//if error
			e.printStackTrace();//print error information.
		} finally {
			closePropertiesInputStream(inputStream);//close the input stream.
		}
	}

	//closes the stream from a properties file.
	private static void closePropertiesInputStream(InputStream is) {
		try {
			if (is != null) {//if there is an input stream.
				is.close();//close it.
			}
		} catch (IOException e) {//if error.
			e.printStackTrace();//print error information.
		}
	}

	/**
	 * Gets a method name from the stack trace.
	 * 
	 * @param depth
	 *            The depth of the method name requested (0 returns the calling
	 *            method).
	 * @return The method name from the stack trace at the depth requested.
	 * @return "method_name" if the depth is invalid.
	 */
	public String getMethodName(int depth) {
		String name = "method_name";
		try {
			final StackTraceElement[] ele = Thread.currentThread().getStackTrace();//get the current entries on the stack.
			name = ele[2 + depth].getMethodName();//get the name of the requested method.
		} catch (IndexOutOfBoundsException e) {
			System.out.println("searched too deep in stack trace, returning \"method_name\".");//prevent you from breaking the test because of bad index.
			return name;
		}
		return name;
	}

	/**
	 * Waits for the specified amount of time and logs the wait time.
	 * @param seconds The number of seconds to have the execution wait.
	 */
	public void sleep(int seconds){
		System.out.println("sleeping for " + seconds + " seconds");//log the wait
		try{
			Thread.sleep(seconds * 1000);//sleeps for (seconds * 1000) milliseconds
		}catch(Exception e){
			System.out.println("Thread has insomnia.");//could not sleep.
		}
	}
	
	public String[] getDropBoxOptions(String key){
		String temp = dropDownProperties.getProperty(key);
		return temp.split(";");
	}
	
}
